import org.apache.commons.io.FileExistsException
import org.apache.commons.io.FileUtils
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-io:commons-io:2.7'
    }
}
plugins {
    id 'application'
}
project.ext.root = new File("$projectDir/src/main/resources/natives")

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    /**ECS related**/
    implementation "net.onedaybeard.artemis:artemis-odb:2.3.0"
    implementation "net.mostlyoriginal.artemis-odb:contrib-core:2.4.0"
    implementation "net.mostlyoriginal.artemis-odb:contrib-eventbus:2.4.0"
    implementation "net.mostlyoriginal.artemis-odb:contrib-network:2.4.0"
    /**Misc**/
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation files("${rootDir.path}/libs/jvox.jar")
    implementation project(":assets")

    /**Opengl related**/
    implementation platform("org.lwjgl:lwjgl-bom:3.2.3")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-par"
    implementation "org.joml:joml:1.10.1"
    implementation 'com.github.kotlin-graphics:assimp:v4.0'
    runtime platform("org.lwjgl:lwjgl-bom:3.2.3")
    runtime "org.lwjgl:lwjgl::natives-$platform"
    runtime "org.lwjgl:lwjgl-glfw::natives-$platform"
    runtime "org.lwjgl:lwjgl-opengl::natives-$platform"
    runtime "org.lwjgl:lwjgl-stb::natives-$platform"
    runtime "org.lwjgl:lwjgl-par::natives-$platform"

    /**Imgui related**/
    implementation 'io.github.spair:imgui-java-lwjgl3:1.82.0'
    runtime "io.github.spair:imgui-java-natives-$platform:1.82.0"
    implementation 'io.github.spair:imgui-java-binding:1.82.0'
}

/**
 * This should extract all of the natives from the files.
 */
task extractNative(type: Copy) {
    configurations.runtime.each {
        if (it.absolutePath.contains("native")) {
            from zipTree(it)
            include "**/*.dylib"
            include "**/*.dll"
            into project.ext.root
            includeEmptyDirs = false
        }
    }
    doLast {
        moveFiles(project.ext.root)
    }
}
/**
 * This will properly run the main and if it's on mac it will use the correct args
 */
run {
    mainClassName = "MainKt"
    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        dependsOn extractNative
        jvmArgs = ["-Djava.library.path=${project.ext.root}", "-XstartOnFirstThread",]
    }
}

/**
 * This will move our natives.
 */
private static def moveFiles(def root) {
    def children = root.listFiles()
    moveChildren(root, root, children)
}
/**
 * This will remove the children from the given path to
 * @param File
 */
private static def moveChildren(File root, File current, File[] children) {
    for (File child : children) {
        if (child.isFile()) {
            try {
                FileUtils.moveFileToDirectory(child, root, true)
            } catch (Exception ex) {
                child.delete()
            }
        } else {
            moveChildren(root, child, child.listFiles())
        }
    }
    if (current.listFiles().size() <= 0) {
        current.deleteDir()
    }

}
